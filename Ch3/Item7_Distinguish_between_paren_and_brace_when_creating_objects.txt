這一節討論初始化時使用()和{}的差別。
先說結論：
(1)使用class的時候，盡可能只用()或{}，必要時再用另外一種
(2)刻class的時候，盡量讓()和{}初始化得到一樣的結果。

Q:為什麼C++11要引進{}初始化？
*想要cover所有初始化的情境：例如在vector初始化時塞指定的元素進去：
vector<int> vec1{1,3,4};//初始化一個有1,3,4這三個int的vector

大部分時候()和{}的行為都是一樣的：
class Man
{
public:
	Book(const int Age,const double height);
	...
};

Man man1(20,161.2);
和
Man man2{20,161.2};
結果會一樣。

而{}的好處是和其它初始化的語法比起來，它在很多情況都通用，例如：

--指定default initialization value:
class Man
{
...
private:

int age=10; //OK
double height{177.2};//OK
double weight(88.2);//Error!
};

--當class沒有copy constructor的時候：
class UniqueMan:
{
	UniqueMan(const int age);
	UniqueMan(const UniqueMan& man)=delete;
	...
};

UniqueMan man1(10);//OK
UniqueMan man2{10};//OK
UniqueMan man3=10;//error!

除此之外{}還有一些好處：

--不會隱性地對built-in types向下轉型(implicit narrowing conver‐sions)：
double x,y,z;
...
int a=x+y+z;//OK
int b(x+y+z);//OK
int c{x+y+z};//不能偷偷往下轉,error.

--可以避免default initialization被當成函數：

class Book
{
	Book();
	Book(const int cost);
	...
};
Book book1(10);//OK
Book book2;//OK
Book book3();//會很靠妖的被當成一個名為book3，回傳Book型別值的函數宣告...
Book book4{};//快樂的呼叫default constructor~

Q:{}的缺點？

--當class的constructor有std::initializer_list引數的時候：

class Widget {
public:
Widget(int i, bool b);
Widget(std::initializer_list<long double> il);
...
};

Widget W1(10, true)//呼叫第一個constructor
Widget W2{10,true}//會叫到第三個constructor，就算需要轉成long和double!

除非{}裡面的東西不能轉成initializer list要的東西(ex. int to string)，才會採用非intiailizer list的constructor

所以作者認為vector constructor的設計是個錯誤：
vector<int> vec1(10,20); //產生含有10個int的vector
vector<int> vec2{10,20}; //產生含有10和20兩個int的vector
容易造成使用者的困淆(呼應結論1!)
我的疑問:那要怎麼設計呢...而且話說當初C++11會多出{}不就是為了第二種狀況嗎XD

此外一些同樣的狀況：
class Widget {
public:
Widget(); // default ctor
Widget(std::initializer_list<int> il); // std::initializer_list ctor
... 
};
Widget w1; // calls default ctor
Widget w2{}; // also calls default ctor
Widget w3(); // most vexing parse! declares a function!
想要創造一個空的initializer_list，卻會呼叫到default constructor。
如果真的要空的list則要：
Widget w4({});

後面還有一段講到在template內呼叫constructor時的困難，同樣也是因initializer_list產生的衝突(但我還沒看懂..)

總之結論就像前面說的：
(1)用class時盡量只用()或{}，需要再用另一種
(2)寫class時避免()和{}產生的結果不一致




